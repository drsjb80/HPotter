// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/kernels/boosted_trees/boosted_trees.proto

#ifndef PROTOBUF_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto__INCLUDED
#define PROTOBUF_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace tensorflow {
namespace boosted_trees {
class BucketizedSplit;
class BucketizedSplitDefaultTypeInternal;
extern BucketizedSplitDefaultTypeInternal _BucketizedSplit_default_instance_;
class GrowingMetadata;
class GrowingMetadataDefaultTypeInternal;
extern GrowingMetadataDefaultTypeInternal _GrowingMetadata_default_instance_;
class Leaf;
class LeafDefaultTypeInternal;
extern LeafDefaultTypeInternal _Leaf_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeMetadata;
class NodeMetadataDefaultTypeInternal;
extern NodeMetadataDefaultTypeInternal _NodeMetadata_default_instance_;
class SparseVector;
class SparseVectorDefaultTypeInternal;
extern SparseVectorDefaultTypeInternal _SparseVector_default_instance_;
class Tree;
class TreeDefaultTypeInternal;
extern TreeDefaultTypeInternal _Tree_default_instance_;
class TreeEnsemble;
class TreeEnsembleDefaultTypeInternal;
extern TreeEnsembleDefaultTypeInternal _TreeEnsemble_default_instance_;
class TreeMetadata;
class TreeMetadataDefaultTypeInternal;
extern TreeMetadataDefaultTypeInternal _TreeMetadata_default_instance_;
class TreeMetadata_PostPruneNodeUpdate;
class TreeMetadata_PostPruneNodeUpdateDefaultTypeInternal;
extern TreeMetadata_PostPruneNodeUpdateDefaultTypeInternal _TreeMetadata_PostPruneNodeUpdate_default_instance_;
class Vector;
class VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
}  // namespace boosted_trees
}  // namespace tensorflow

namespace tensorflow {
namespace boosted_trees {

namespace protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto

// ===================================================================

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.boosted_trees.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  enum NodeCase {
    kLeaf = 1,
    kBucketizedSplit = 2,
    NODE_NOT_SET = 0,
  };

  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Node* other);
  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const PROTOBUF_FINAL { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Node* other);
  protected:
  explicit Node(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.boosted_trees.NodeMetadata metadata = 777;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 777;
  private:
  void _slow_mutable_metadata();
  void _slow_set_allocated_metadata(
      ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::NodeMetadata** metadata);
  ::tensorflow::boosted_trees::NodeMetadata* _slow_release_metadata();
  public:
  const ::tensorflow::boosted_trees::NodeMetadata& metadata() const;
  ::tensorflow::boosted_trees::NodeMetadata* mutable_metadata();
  ::tensorflow::boosted_trees::NodeMetadata* release_metadata();
  void set_allocated_metadata(::tensorflow::boosted_trees::NodeMetadata* metadata);
  ::tensorflow::boosted_trees::NodeMetadata* unsafe_arena_release_metadata();
  void unsafe_arena_set_allocated_metadata(
      ::tensorflow::boosted_trees::NodeMetadata* metadata);

  // .tensorflow.boosted_trees.Leaf leaf = 1;
  bool has_leaf() const;
  void clear_leaf();
  static const int kLeafFieldNumber = 1;
  private:
  void _slow_mutable_leaf();
  void _slow_set_allocated_leaf(
      ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::Leaf** leaf);
  ::tensorflow::boosted_trees::Leaf* _slow_release_leaf();
  public:
  const ::tensorflow::boosted_trees::Leaf& leaf() const;
  ::tensorflow::boosted_trees::Leaf* mutable_leaf();
  ::tensorflow::boosted_trees::Leaf* release_leaf();
  void set_allocated_leaf(::tensorflow::boosted_trees::Leaf* leaf);
  ::tensorflow::boosted_trees::Leaf* unsafe_arena_release_leaf();
  void unsafe_arena_set_allocated_leaf(
      ::tensorflow::boosted_trees::Leaf* leaf);

  // .tensorflow.boosted_trees.BucketizedSplit bucketized_split = 2;
  bool has_bucketized_split() const;
  void clear_bucketized_split();
  static const int kBucketizedSplitFieldNumber = 2;
  private:
  void _slow_mutable_bucketized_split();
  void _slow_set_allocated_bucketized_split(
      ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::BucketizedSplit** bucketized_split);
  ::tensorflow::boosted_trees::BucketizedSplit* _slow_release_bucketized_split();
  public:
  const ::tensorflow::boosted_trees::BucketizedSplit& bucketized_split() const;
  ::tensorflow::boosted_trees::BucketizedSplit* mutable_bucketized_split();
  ::tensorflow::boosted_trees::BucketizedSplit* release_bucketized_split();
  void set_allocated_bucketized_split(::tensorflow::boosted_trees::BucketizedSplit* bucketized_split);
  ::tensorflow::boosted_trees::BucketizedSplit* unsafe_arena_release_bucketized_split();
  void unsafe_arena_set_allocated_bucketized_split(
      ::tensorflow::boosted_trees::BucketizedSplit* bucketized_split);

  NodeCase node_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.boosted_trees.Node)
 private:
  void set_has_leaf();
  void set_has_bucketized_split();

  inline bool has_node() const;
  void clear_node();
  inline void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::boosted_trees::NodeMetadata* metadata_;
  union NodeUnion {
    NodeUnion() {}
    ::tensorflow::boosted_trees::Leaf* leaf_;
    ::tensorflow::boosted_trees::BucketizedSplit* bucketized_split_;
  } node_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.boosted_trees.NodeMetadata) */ {
 public:
  NodeMetadata();
  virtual ~NodeMetadata();

  NodeMetadata(const NodeMetadata& from);

  inline NodeMetadata& operator=(const NodeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeMetadata(NodeMetadata&& from) noexcept
    : NodeMetadata() {
    *this = ::std::move(from);
  }

  inline NodeMetadata& operator=(NodeMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeMetadata& default_instance();

  static inline const NodeMetadata* internal_default_instance() {
    return reinterpret_cast<const NodeMetadata*>(
               &_NodeMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(NodeMetadata* other);
  void Swap(NodeMetadata* other);
  friend void swap(NodeMetadata& a, NodeMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeMetadata& from);
  void MergeFrom(const NodeMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeMetadata* other);
  protected:
  explicit NodeMetadata(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tensorflow.boosted_trees.Leaf original_leaf = 2;
  bool has_original_leaf() const;
  void clear_original_leaf();
  static const int kOriginalLeafFieldNumber = 2;
  private:
  void _slow_mutable_original_leaf();
  void _slow_set_allocated_original_leaf(
      ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::Leaf** original_leaf);
  ::tensorflow::boosted_trees::Leaf* _slow_release_original_leaf();
  public:
  const ::tensorflow::boosted_trees::Leaf& original_leaf() const;
  ::tensorflow::boosted_trees::Leaf* mutable_original_leaf();
  ::tensorflow::boosted_trees::Leaf* release_original_leaf();
  void set_allocated_original_leaf(::tensorflow::boosted_trees::Leaf* original_leaf);
  ::tensorflow::boosted_trees::Leaf* unsafe_arena_release_original_leaf();
  void unsafe_arena_set_allocated_original_leaf(
      ::tensorflow::boosted_trees::Leaf* original_leaf);

  // float gain = 1;
  void clear_gain();
  static const int kGainFieldNumber = 1;
  float gain() const;
  void set_gain(float value);

  // @@protoc_insertion_point(class_scope:tensorflow.boosted_trees.NodeMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::tensorflow::boosted_trees::Leaf* original_leaf_;
  float gain_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Leaf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.boosted_trees.Leaf) */ {
 public:
  Leaf();
  virtual ~Leaf();

  Leaf(const Leaf& from);

  inline Leaf& operator=(const Leaf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Leaf(Leaf&& from) noexcept
    : Leaf() {
    *this = ::std::move(from);
  }

  inline Leaf& operator=(Leaf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Leaf& default_instance();

  enum LeafCase {
    kVector = 1,
    kSparseVector = 2,
    LEAF_NOT_SET = 0,
  };

  static inline const Leaf* internal_default_instance() {
    return reinterpret_cast<const Leaf*>(
               &_Leaf_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(Leaf* other);
  void Swap(Leaf* other);
  friend void swap(Leaf& a, Leaf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Leaf* New() const PROTOBUF_FINAL { return New(NULL); }

  Leaf* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Leaf& from);
  void MergeFrom(const Leaf& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Leaf* other);
  protected:
  explicit Leaf(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float scalar = 3;
  void clear_scalar();
  static const int kScalarFieldNumber = 3;
  float scalar() const;
  void set_scalar(float value);

  // .tensorflow.boosted_trees.Vector vector = 1;
  bool has_vector() const;
  void clear_vector();
  static const int kVectorFieldNumber = 1;
  private:
  void _slow_mutable_vector();
  void _slow_set_allocated_vector(
      ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::Vector** vector);
  ::tensorflow::boosted_trees::Vector* _slow_release_vector();
  public:
  const ::tensorflow::boosted_trees::Vector& vector() const;
  ::tensorflow::boosted_trees::Vector* mutable_vector();
  ::tensorflow::boosted_trees::Vector* release_vector();
  void set_allocated_vector(::tensorflow::boosted_trees::Vector* vector);
  ::tensorflow::boosted_trees::Vector* unsafe_arena_release_vector();
  void unsafe_arena_set_allocated_vector(
      ::tensorflow::boosted_trees::Vector* vector);

  // .tensorflow.boosted_trees.SparseVector sparse_vector = 2;
  bool has_sparse_vector() const;
  void clear_sparse_vector();
  static const int kSparseVectorFieldNumber = 2;
  private:
  void _slow_mutable_sparse_vector();
  void _slow_set_allocated_sparse_vector(
      ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::SparseVector** sparse_vector);
  ::tensorflow::boosted_trees::SparseVector* _slow_release_sparse_vector();
  public:
  const ::tensorflow::boosted_trees::SparseVector& sparse_vector() const;
  ::tensorflow::boosted_trees::SparseVector* mutable_sparse_vector();
  ::tensorflow::boosted_trees::SparseVector* release_sparse_vector();
  void set_allocated_sparse_vector(::tensorflow::boosted_trees::SparseVector* sparse_vector);
  ::tensorflow::boosted_trees::SparseVector* unsafe_arena_release_sparse_vector();
  void unsafe_arena_set_allocated_sparse_vector(
      ::tensorflow::boosted_trees::SparseVector* sparse_vector);

  LeafCase leaf_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.boosted_trees.Leaf)
 private:
  void set_has_vector();
  void set_has_sparse_vector();

  inline bool has_leaf() const;
  void clear_leaf();
  inline void clear_has_leaf();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float scalar_;
  union LeafUnion {
    LeafUnion() {}
    ::tensorflow::boosted_trees::Vector* vector_;
    ::tensorflow::boosted_trees::SparseVector* sparse_vector_;
  } leaf_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.boosted_trees.Vector) */ {
 public:
  Vector();
  virtual ~Vector();

  Vector(const Vector& from);

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(Vector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector& default_instance();

  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(Vector* other);
  void Swap(Vector* other);
  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector* New() const PROTOBUF_FINAL { return New(NULL); }

  Vector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Vector& from);
  void MergeFrom(const Vector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Vector* other);
  protected:
  explicit Vector(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float value = 1;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:tensorflow.boosted_trees.Vector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SparseVector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.boosted_trees.SparseVector) */ {
 public:
  SparseVector();
  virtual ~SparseVector();

  SparseVector(const SparseVector& from);

  inline SparseVector& operator=(const SparseVector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SparseVector(SparseVector&& from) noexcept
    : SparseVector() {
    *this = ::std::move(from);
  }

  inline SparseVector& operator=(SparseVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SparseVector& default_instance();

  static inline const SparseVector* internal_default_instance() {
    return reinterpret_cast<const SparseVector*>(
               &_SparseVector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(SparseVector* other);
  void Swap(SparseVector* other);
  friend void swap(SparseVector& a, SparseVector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SparseVector* New() const PROTOBUF_FINAL { return New(NULL); }

  SparseVector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SparseVector& from);
  void MergeFrom(const SparseVector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SparseVector* other);
  protected:
  explicit SparseVector(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 index = 1;
  int index_size() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::int32 index(int index) const;
  void set_index(int index, ::google::protobuf::int32 value);
  void add_index(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      index() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_index();

  // repeated float value = 2;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:tensorflow.boosted_trees.SparseVector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > index_;
  mutable int _index_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BucketizedSplit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.boosted_trees.BucketizedSplit) */ {
 public:
  BucketizedSplit();
  virtual ~BucketizedSplit();

  BucketizedSplit(const BucketizedSplit& from);

  inline BucketizedSplit& operator=(const BucketizedSplit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BucketizedSplit(BucketizedSplit&& from) noexcept
    : BucketizedSplit() {
    *this = ::std::move(from);
  }

  inline BucketizedSplit& operator=(BucketizedSplit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BucketizedSplit& default_instance();

  static inline const BucketizedSplit* internal_default_instance() {
    return reinterpret_cast<const BucketizedSplit*>(
               &_BucketizedSplit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(BucketizedSplit* other);
  void Swap(BucketizedSplit* other);
  friend void swap(BucketizedSplit& a, BucketizedSplit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BucketizedSplit* New() const PROTOBUF_FINAL { return New(NULL); }

  BucketizedSplit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BucketizedSplit& from);
  void MergeFrom(const BucketizedSplit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BucketizedSplit* other);
  protected:
  explicit BucketizedSplit(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 feature_id = 1;
  void clear_feature_id();
  static const int kFeatureIdFieldNumber = 1;
  ::google::protobuf::int32 feature_id() const;
  void set_feature_id(::google::protobuf::int32 value);

  // int32 threshold = 2;
  void clear_threshold();
  static const int kThresholdFieldNumber = 2;
  ::google::protobuf::int32 threshold() const;
  void set_threshold(::google::protobuf::int32 value);

  // int32 left_id = 3;
  void clear_left_id();
  static const int kLeftIdFieldNumber = 3;
  ::google::protobuf::int32 left_id() const;
  void set_left_id(::google::protobuf::int32 value);

  // int32 right_id = 4;
  void clear_right_id();
  static const int kRightIdFieldNumber = 4;
  ::google::protobuf::int32 right_id() const;
  void set_right_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.boosted_trees.BucketizedSplit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int32 feature_id_;
  ::google::protobuf::int32 threshold_;
  ::google::protobuf::int32 left_id_;
  ::google::protobuf::int32 right_id_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Tree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.boosted_trees.Tree) */ {
 public:
  Tree();
  virtual ~Tree();

  Tree(const Tree& from);

  inline Tree& operator=(const Tree& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tree(Tree&& from) noexcept
    : Tree() {
    *this = ::std::move(from);
  }

  inline Tree& operator=(Tree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tree& default_instance();

  static inline const Tree* internal_default_instance() {
    return reinterpret_cast<const Tree*>(
               &_Tree_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(Tree* other);
  void Swap(Tree* other);
  friend void swap(Tree& a, Tree& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tree* New() const PROTOBUF_FINAL { return New(NULL); }

  Tree* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Tree& from);
  void MergeFrom(const Tree& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Tree* other);
  protected:
  explicit Tree(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.boosted_trees.Node nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  const ::tensorflow::boosted_trees::Node& nodes(int index) const;
  ::tensorflow::boosted_trees::Node* mutable_nodes(int index);
  ::tensorflow::boosted_trees::Node* add_nodes();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::Node >*
      mutable_nodes();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::Node >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:tensorflow.boosted_trees.Tree)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::Node > nodes_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TreeMetadata_PostPruneNodeUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate) */ {
 public:
  TreeMetadata_PostPruneNodeUpdate();
  virtual ~TreeMetadata_PostPruneNodeUpdate();

  TreeMetadata_PostPruneNodeUpdate(const TreeMetadata_PostPruneNodeUpdate& from);

  inline TreeMetadata_PostPruneNodeUpdate& operator=(const TreeMetadata_PostPruneNodeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreeMetadata_PostPruneNodeUpdate(TreeMetadata_PostPruneNodeUpdate&& from) noexcept
    : TreeMetadata_PostPruneNodeUpdate() {
    *this = ::std::move(from);
  }

  inline TreeMetadata_PostPruneNodeUpdate& operator=(TreeMetadata_PostPruneNodeUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeMetadata_PostPruneNodeUpdate& default_instance();

  static inline const TreeMetadata_PostPruneNodeUpdate* internal_default_instance() {
    return reinterpret_cast<const TreeMetadata_PostPruneNodeUpdate*>(
               &_TreeMetadata_PostPruneNodeUpdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(TreeMetadata_PostPruneNodeUpdate* other);
  void Swap(TreeMetadata_PostPruneNodeUpdate* other);
  friend void swap(TreeMetadata_PostPruneNodeUpdate& a, TreeMetadata_PostPruneNodeUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreeMetadata_PostPruneNodeUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  TreeMetadata_PostPruneNodeUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TreeMetadata_PostPruneNodeUpdate& from);
  void MergeFrom(const TreeMetadata_PostPruneNodeUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TreeMetadata_PostPruneNodeUpdate* other);
  protected:
  explicit TreeMetadata_PostPruneNodeUpdate(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 new_node_id = 1;
  void clear_new_node_id();
  static const int kNewNodeIdFieldNumber = 1;
  ::google::protobuf::int32 new_node_id() const;
  void set_new_node_id(::google::protobuf::int32 value);

  // float logit_change = 2;
  void clear_logit_change();
  static const int kLogitChangeFieldNumber = 2;
  float logit_change() const;
  void set_logit_change(float value);

  // @@protoc_insertion_point(class_scope:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int32 new_node_id_;
  float logit_change_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TreeMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.boosted_trees.TreeMetadata) */ {
 public:
  TreeMetadata();
  virtual ~TreeMetadata();

  TreeMetadata(const TreeMetadata& from);

  inline TreeMetadata& operator=(const TreeMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreeMetadata(TreeMetadata&& from) noexcept
    : TreeMetadata() {
    *this = ::std::move(from);
  }

  inline TreeMetadata& operator=(TreeMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeMetadata& default_instance();

  static inline const TreeMetadata* internal_default_instance() {
    return reinterpret_cast<const TreeMetadata*>(
               &_TreeMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(TreeMetadata* other);
  void Swap(TreeMetadata* other);
  friend void swap(TreeMetadata& a, TreeMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreeMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  TreeMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TreeMetadata& from);
  void MergeFrom(const TreeMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TreeMetadata* other);
  protected:
  explicit TreeMetadata(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TreeMetadata_PostPruneNodeUpdate PostPruneNodeUpdate;

  // accessors -------------------------------------------------------

  // repeated .tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate post_pruned_nodes_meta = 4;
  int post_pruned_nodes_meta_size() const;
  void clear_post_pruned_nodes_meta();
  static const int kPostPrunedNodesMetaFieldNumber = 4;
  const ::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate& post_pruned_nodes_meta(int index) const;
  ::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate* mutable_post_pruned_nodes_meta(int index);
  ::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate* add_post_pruned_nodes_meta();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate >*
      mutable_post_pruned_nodes_meta();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate >&
      post_pruned_nodes_meta() const;

  // int32 num_layers_grown = 2;
  void clear_num_layers_grown();
  static const int kNumLayersGrownFieldNumber = 2;
  ::google::protobuf::int32 num_layers_grown() const;
  void set_num_layers_grown(::google::protobuf::int32 value);

  // bool is_finalized = 3;
  void clear_is_finalized();
  static const int kIsFinalizedFieldNumber = 3;
  bool is_finalized() const;
  void set_is_finalized(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.boosted_trees.TreeMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate > post_pruned_nodes_meta_;
  ::google::protobuf::int32 num_layers_grown_;
  bool is_finalized_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GrowingMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.boosted_trees.GrowingMetadata) */ {
 public:
  GrowingMetadata();
  virtual ~GrowingMetadata();

  GrowingMetadata(const GrowingMetadata& from);

  inline GrowingMetadata& operator=(const GrowingMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GrowingMetadata(GrowingMetadata&& from) noexcept
    : GrowingMetadata() {
    *this = ::std::move(from);
  }

  inline GrowingMetadata& operator=(GrowingMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GrowingMetadata& default_instance();

  static inline const GrowingMetadata* internal_default_instance() {
    return reinterpret_cast<const GrowingMetadata*>(
               &_GrowingMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(GrowingMetadata* other);
  void Swap(GrowingMetadata* other);
  friend void swap(GrowingMetadata& a, GrowingMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GrowingMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  GrowingMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GrowingMetadata& from);
  void MergeFrom(const GrowingMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GrowingMetadata* other);
  protected:
  explicit GrowingMetadata(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 num_trees_attempted = 1;
  void clear_num_trees_attempted();
  static const int kNumTreesAttemptedFieldNumber = 1;
  ::google::protobuf::int64 num_trees_attempted() const;
  void set_num_trees_attempted(::google::protobuf::int64 value);

  // int64 num_layers_attempted = 2;
  void clear_num_layers_attempted();
  static const int kNumLayersAttemptedFieldNumber = 2;
  ::google::protobuf::int64 num_layers_attempted() const;
  void set_num_layers_attempted(::google::protobuf::int64 value);

  // int32 last_layer_node_start = 3;
  void clear_last_layer_node_start();
  static const int kLastLayerNodeStartFieldNumber = 3;
  ::google::protobuf::int32 last_layer_node_start() const;
  void set_last_layer_node_start(::google::protobuf::int32 value);

  // int32 last_layer_node_end = 4;
  void clear_last_layer_node_end();
  static const int kLastLayerNodeEndFieldNumber = 4;
  ::google::protobuf::int32 last_layer_node_end() const;
  void set_last_layer_node_end(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.boosted_trees.GrowingMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::int64 num_trees_attempted_;
  ::google::protobuf::int64 num_layers_attempted_;
  ::google::protobuf::int32 last_layer_node_start_;
  ::google::protobuf::int32 last_layer_node_end_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TreeEnsemble : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.boosted_trees.TreeEnsemble) */ {
 public:
  TreeEnsemble();
  virtual ~TreeEnsemble();

  TreeEnsemble(const TreeEnsemble& from);

  inline TreeEnsemble& operator=(const TreeEnsemble& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreeEnsemble(TreeEnsemble&& from) noexcept
    : TreeEnsemble() {
    *this = ::std::move(from);
  }

  inline TreeEnsemble& operator=(TreeEnsemble&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeEnsemble& default_instance();

  static inline const TreeEnsemble* internal_default_instance() {
    return reinterpret_cast<const TreeEnsemble*>(
               &_TreeEnsemble_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(TreeEnsemble* other);
  void Swap(TreeEnsemble* other);
  friend void swap(TreeEnsemble& a, TreeEnsemble& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreeEnsemble* New() const PROTOBUF_FINAL { return New(NULL); }

  TreeEnsemble* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TreeEnsemble& from);
  void MergeFrom(const TreeEnsemble& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TreeEnsemble* other);
  protected:
  explicit TreeEnsemble(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.boosted_trees.Tree trees = 1;
  int trees_size() const;
  void clear_trees();
  static const int kTreesFieldNumber = 1;
  const ::tensorflow::boosted_trees::Tree& trees(int index) const;
  ::tensorflow::boosted_trees::Tree* mutable_trees(int index);
  ::tensorflow::boosted_trees::Tree* add_trees();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::Tree >*
      mutable_trees();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::Tree >&
      trees() const;

  // repeated float tree_weights = 2;
  int tree_weights_size() const;
  void clear_tree_weights();
  static const int kTreeWeightsFieldNumber = 2;
  float tree_weights(int index) const;
  void set_tree_weights(int index, float value);
  void add_tree_weights(float value);
  const ::google::protobuf::RepeatedField< float >&
      tree_weights() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_tree_weights();

  // repeated .tensorflow.boosted_trees.TreeMetadata tree_metadata = 3;
  int tree_metadata_size() const;
  void clear_tree_metadata();
  static const int kTreeMetadataFieldNumber = 3;
  const ::tensorflow::boosted_trees::TreeMetadata& tree_metadata(int index) const;
  ::tensorflow::boosted_trees::TreeMetadata* mutable_tree_metadata(int index);
  ::tensorflow::boosted_trees::TreeMetadata* add_tree_metadata();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::TreeMetadata >*
      mutable_tree_metadata();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::TreeMetadata >&
      tree_metadata() const;

  // .tensorflow.boosted_trees.GrowingMetadata growing_metadata = 4;
  bool has_growing_metadata() const;
  void clear_growing_metadata();
  static const int kGrowingMetadataFieldNumber = 4;
  private:
  void _slow_mutable_growing_metadata();
  void _slow_set_allocated_growing_metadata(
      ::google::protobuf::Arena* message_arena, ::tensorflow::boosted_trees::GrowingMetadata** growing_metadata);
  ::tensorflow::boosted_trees::GrowingMetadata* _slow_release_growing_metadata();
  public:
  const ::tensorflow::boosted_trees::GrowingMetadata& growing_metadata() const;
  ::tensorflow::boosted_trees::GrowingMetadata* mutable_growing_metadata();
  ::tensorflow::boosted_trees::GrowingMetadata* release_growing_metadata();
  void set_allocated_growing_metadata(::tensorflow::boosted_trees::GrowingMetadata* growing_metadata);
  ::tensorflow::boosted_trees::GrowingMetadata* unsafe_arena_release_growing_metadata();
  void unsafe_arena_set_allocated_growing_metadata(
      ::tensorflow::boosted_trees::GrowingMetadata* growing_metadata);

  // @@protoc_insertion_point(class_scope:tensorflow.boosted_trees.TreeEnsemble)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::Tree > trees_;
  ::google::protobuf::RepeatedField< float > tree_weights_;
  mutable int _tree_weights_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::TreeMetadata > tree_metadata_;
  ::tensorflow::boosted_trees::GrowingMetadata* growing_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// .tensorflow.boosted_trees.Leaf leaf = 1;
inline bool Node::has_leaf() const {
  return node_case() == kLeaf;
}
inline void Node::set_has_leaf() {
  _oneof_case_[0] = kLeaf;
}
inline void Node::clear_leaf() {
  if (has_leaf()) {
    if (GetArenaNoVirtual() == NULL) {
      delete node_.leaf_;
    }
    clear_has_node();
  }
}
inline  const ::tensorflow::boosted_trees::Leaf& Node::leaf() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Node.leaf)
  return has_leaf()
      ? *node_.leaf_
      : ::tensorflow::boosted_trees::Leaf::default_instance();
}
inline ::tensorflow::boosted_trees::Leaf* Node::mutable_leaf() {
  if (!has_leaf()) {
    clear_node();
    set_has_leaf();
    node_.leaf_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::Leaf >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.Node.leaf)
  return node_.leaf_;
}
inline ::tensorflow::boosted_trees::Leaf* Node::release_leaf() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.Node.leaf)
  if (has_leaf()) {
    clear_has_node();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::Leaf* temp = new ::tensorflow::boosted_trees::Leaf(*node_.leaf_);
      node_.leaf_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::Leaf* temp = node_.leaf_;
      node_.leaf_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void Node::set_allocated_leaf(::tensorflow::boosted_trees::Leaf* leaf) {
  clear_node();
  if (leaf) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(leaf) == NULL) {
      GetArenaNoVirtual()->Own(leaf);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(leaf)) {
      ::tensorflow::boosted_trees::Leaf* new_leaf = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::Leaf >(
          GetArenaNoVirtual());
      new_leaf->CopyFrom(*leaf);
      leaf = new_leaf;
    }
    set_has_leaf();
    node_.leaf_ = leaf;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.Node.leaf)
}
inline  ::tensorflow::boosted_trees::Leaf* Node::unsafe_arena_release_leaf() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.Node.leaf)
  if (has_leaf()) {
    clear_has_node();
    ::tensorflow::boosted_trees::Leaf* temp = node_.leaf_;
    node_.leaf_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void Node::unsafe_arena_set_allocated_leaf(::tensorflow::boosted_trees::Leaf* leaf) {
  clear_node();
  if (leaf) {
    set_has_leaf();
    node_.leaf_ = leaf;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.Node.leaf)
}

// .tensorflow.boosted_trees.BucketizedSplit bucketized_split = 2;
inline bool Node::has_bucketized_split() const {
  return node_case() == kBucketizedSplit;
}
inline void Node::set_has_bucketized_split() {
  _oneof_case_[0] = kBucketizedSplit;
}
inline void Node::clear_bucketized_split() {
  if (has_bucketized_split()) {
    if (GetArenaNoVirtual() == NULL) {
      delete node_.bucketized_split_;
    }
    clear_has_node();
  }
}
inline  const ::tensorflow::boosted_trees::BucketizedSplit& Node::bucketized_split() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Node.bucketized_split)
  return has_bucketized_split()
      ? *node_.bucketized_split_
      : ::tensorflow::boosted_trees::BucketizedSplit::default_instance();
}
inline ::tensorflow::boosted_trees::BucketizedSplit* Node::mutable_bucketized_split() {
  if (!has_bucketized_split()) {
    clear_node();
    set_has_bucketized_split();
    node_.bucketized_split_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::BucketizedSplit >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.Node.bucketized_split)
  return node_.bucketized_split_;
}
inline ::tensorflow::boosted_trees::BucketizedSplit* Node::release_bucketized_split() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.Node.bucketized_split)
  if (has_bucketized_split()) {
    clear_has_node();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::BucketizedSplit* temp = new ::tensorflow::boosted_trees::BucketizedSplit(*node_.bucketized_split_);
      node_.bucketized_split_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::BucketizedSplit* temp = node_.bucketized_split_;
      node_.bucketized_split_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void Node::set_allocated_bucketized_split(::tensorflow::boosted_trees::BucketizedSplit* bucketized_split) {
  clear_node();
  if (bucketized_split) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(bucketized_split) == NULL) {
      GetArenaNoVirtual()->Own(bucketized_split);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(bucketized_split)) {
      ::tensorflow::boosted_trees::BucketizedSplit* new_bucketized_split = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::BucketizedSplit >(
          GetArenaNoVirtual());
      new_bucketized_split->CopyFrom(*bucketized_split);
      bucketized_split = new_bucketized_split;
    }
    set_has_bucketized_split();
    node_.bucketized_split_ = bucketized_split;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.Node.bucketized_split)
}
inline  ::tensorflow::boosted_trees::BucketizedSplit* Node::unsafe_arena_release_bucketized_split() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.Node.bucketized_split)
  if (has_bucketized_split()) {
    clear_has_node();
    ::tensorflow::boosted_trees::BucketizedSplit* temp = node_.bucketized_split_;
    node_.bucketized_split_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void Node::unsafe_arena_set_allocated_bucketized_split(::tensorflow::boosted_trees::BucketizedSplit* bucketized_split) {
  clear_node();
  if (bucketized_split) {
    set_has_bucketized_split();
    node_.bucketized_split_ = bucketized_split;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.Node.bucketized_split)
}

// .tensorflow.boosted_trees.NodeMetadata metadata = 777;
inline bool Node::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
inline void Node::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::tensorflow::boosted_trees::NodeMetadata& Node::metadata() const {
  const ::tensorflow::boosted_trees::NodeMetadata* p = metadata_;
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Node.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::boosted_trees::NodeMetadata*>(
      &::tensorflow::boosted_trees::_NodeMetadata_default_instance_);
}
inline ::tensorflow::boosted_trees::NodeMetadata* Node::mutable_metadata() {
  
  if (metadata_ == NULL) {
    _slow_mutable_metadata();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.Node.metadata)
  return metadata_;
}
inline ::tensorflow::boosted_trees::NodeMetadata* Node::release_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.Node.metadata)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_metadata();
  } else {
    ::tensorflow::boosted_trees::NodeMetadata* temp = metadata_;
    metadata_ = NULL;
    return temp;
  }
}
inline  void Node::set_allocated_metadata(::tensorflow::boosted_trees::NodeMetadata* metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete metadata_;
  }
  if (metadata != NULL) {
    _slow_set_allocated_metadata(message_arena, &metadata);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.Node.metadata)
}

inline bool Node::has_node() const {
  return node_case() != NODE_NOT_SET;
}
inline void Node::clear_has_node() {
  _oneof_case_[0] = NODE_NOT_SET;
}
inline Node::NodeCase Node::node_case() const {
  return Node::NodeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NodeMetadata

// float gain = 1;
inline void NodeMetadata::clear_gain() {
  gain_ = 0;
}
inline float NodeMetadata::gain() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.NodeMetadata.gain)
  return gain_;
}
inline void NodeMetadata::set_gain(float value) {
  
  gain_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.NodeMetadata.gain)
}

// .tensorflow.boosted_trees.Leaf original_leaf = 2;
inline bool NodeMetadata::has_original_leaf() const {
  return this != internal_default_instance() && original_leaf_ != NULL;
}
inline void NodeMetadata::clear_original_leaf() {
  if (GetArenaNoVirtual() == NULL && original_leaf_ != NULL) delete original_leaf_;
  original_leaf_ = NULL;
}
inline const ::tensorflow::boosted_trees::Leaf& NodeMetadata::original_leaf() const {
  const ::tensorflow::boosted_trees::Leaf* p = original_leaf_;
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.NodeMetadata.original_leaf)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::boosted_trees::Leaf*>(
      &::tensorflow::boosted_trees::_Leaf_default_instance_);
}
inline ::tensorflow::boosted_trees::Leaf* NodeMetadata::mutable_original_leaf() {
  
  if (original_leaf_ == NULL) {
    _slow_mutable_original_leaf();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.NodeMetadata.original_leaf)
  return original_leaf_;
}
inline ::tensorflow::boosted_trees::Leaf* NodeMetadata::release_original_leaf() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.NodeMetadata.original_leaf)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_original_leaf();
  } else {
    ::tensorflow::boosted_trees::Leaf* temp = original_leaf_;
    original_leaf_ = NULL;
    return temp;
  }
}
inline  void NodeMetadata::set_allocated_original_leaf(::tensorflow::boosted_trees::Leaf* original_leaf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete original_leaf_;
  }
  if (original_leaf != NULL) {
    _slow_set_allocated_original_leaf(message_arena, &original_leaf);
  }
  original_leaf_ = original_leaf;
  if (original_leaf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.NodeMetadata.original_leaf)
}

// -------------------------------------------------------------------

// Leaf

// .tensorflow.boosted_trees.Vector vector = 1;
inline bool Leaf::has_vector() const {
  return leaf_case() == kVector;
}
inline void Leaf::set_has_vector() {
  _oneof_case_[0] = kVector;
}
inline void Leaf::clear_vector() {
  if (has_vector()) {
    if (GetArenaNoVirtual() == NULL) {
      delete leaf_.vector_;
    }
    clear_has_leaf();
  }
}
inline  const ::tensorflow::boosted_trees::Vector& Leaf::vector() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Leaf.vector)
  return has_vector()
      ? *leaf_.vector_
      : ::tensorflow::boosted_trees::Vector::default_instance();
}
inline ::tensorflow::boosted_trees::Vector* Leaf::mutable_vector() {
  if (!has_vector()) {
    clear_leaf();
    set_has_vector();
    leaf_.vector_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::Vector >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.Leaf.vector)
  return leaf_.vector_;
}
inline ::tensorflow::boosted_trees::Vector* Leaf::release_vector() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.Leaf.vector)
  if (has_vector()) {
    clear_has_leaf();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::Vector* temp = new ::tensorflow::boosted_trees::Vector(*leaf_.vector_);
      leaf_.vector_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::Vector* temp = leaf_.vector_;
      leaf_.vector_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void Leaf::set_allocated_vector(::tensorflow::boosted_trees::Vector* vector) {
  clear_leaf();
  if (vector) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(vector) == NULL) {
      GetArenaNoVirtual()->Own(vector);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(vector)) {
      ::tensorflow::boosted_trees::Vector* new_vector = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::Vector >(
          GetArenaNoVirtual());
      new_vector->CopyFrom(*vector);
      vector = new_vector;
    }
    set_has_vector();
    leaf_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.Leaf.vector)
}
inline  ::tensorflow::boosted_trees::Vector* Leaf::unsafe_arena_release_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.Leaf.vector)
  if (has_vector()) {
    clear_has_leaf();
    ::tensorflow::boosted_trees::Vector* temp = leaf_.vector_;
    leaf_.vector_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void Leaf::unsafe_arena_set_allocated_vector(::tensorflow::boosted_trees::Vector* vector) {
  clear_leaf();
  if (vector) {
    set_has_vector();
    leaf_.vector_ = vector;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.Leaf.vector)
}

// .tensorflow.boosted_trees.SparseVector sparse_vector = 2;
inline bool Leaf::has_sparse_vector() const {
  return leaf_case() == kSparseVector;
}
inline void Leaf::set_has_sparse_vector() {
  _oneof_case_[0] = kSparseVector;
}
inline void Leaf::clear_sparse_vector() {
  if (has_sparse_vector()) {
    if (GetArenaNoVirtual() == NULL) {
      delete leaf_.sparse_vector_;
    }
    clear_has_leaf();
  }
}
inline  const ::tensorflow::boosted_trees::SparseVector& Leaf::sparse_vector() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Leaf.sparse_vector)
  return has_sparse_vector()
      ? *leaf_.sparse_vector_
      : ::tensorflow::boosted_trees::SparseVector::default_instance();
}
inline ::tensorflow::boosted_trees::SparseVector* Leaf::mutable_sparse_vector() {
  if (!has_sparse_vector()) {
    clear_leaf();
    set_has_sparse_vector();
    leaf_.sparse_vector_ = 
      ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::SparseVector >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.Leaf.sparse_vector)
  return leaf_.sparse_vector_;
}
inline ::tensorflow::boosted_trees::SparseVector* Leaf::release_sparse_vector() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.Leaf.sparse_vector)
  if (has_sparse_vector()) {
    clear_has_leaf();
    if (GetArenaNoVirtual() != NULL) {
      ::tensorflow::boosted_trees::SparseVector* temp = new ::tensorflow::boosted_trees::SparseVector(*leaf_.sparse_vector_);
      leaf_.sparse_vector_ = NULL;
      return temp;
    } else {
      ::tensorflow::boosted_trees::SparseVector* temp = leaf_.sparse_vector_;
      leaf_.sparse_vector_ = NULL;
      return temp;
    }
  } else {
    return NULL;
  }
}
inline void Leaf::set_allocated_sparse_vector(::tensorflow::boosted_trees::SparseVector* sparse_vector) {
  clear_leaf();
  if (sparse_vector) {
    if (GetArenaNoVirtual() != NULL &&
        ::google::protobuf::Arena::GetArena(sparse_vector) == NULL) {
      GetArenaNoVirtual()->Own(sparse_vector);
    } else if (GetArenaNoVirtual() !=
               ::google::protobuf::Arena::GetArena(sparse_vector)) {
      ::tensorflow::boosted_trees::SparseVector* new_sparse_vector = 
          ::google::protobuf::Arena::CreateMessage< ::tensorflow::boosted_trees::SparseVector >(
          GetArenaNoVirtual());
      new_sparse_vector->CopyFrom(*sparse_vector);
      sparse_vector = new_sparse_vector;
    }
    set_has_sparse_vector();
    leaf_.sparse_vector_ = sparse_vector;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.Leaf.sparse_vector)
}
inline  ::tensorflow::boosted_trees::SparseVector* Leaf::unsafe_arena_release_sparse_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.boosted_trees.Leaf.sparse_vector)
  if (has_sparse_vector()) {
    clear_has_leaf();
    ::tensorflow::boosted_trees::SparseVector* temp = leaf_.sparse_vector_;
    leaf_.sparse_vector_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline  void Leaf::unsafe_arena_set_allocated_sparse_vector(::tensorflow::boosted_trees::SparseVector* sparse_vector) {
  clear_leaf();
  if (sparse_vector) {
    set_has_sparse_vector();
    leaf_.sparse_vector_ = sparse_vector;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.boosted_trees.Leaf.sparse_vector)
}

// float scalar = 3;
inline void Leaf::clear_scalar() {
  scalar_ = 0;
}
inline float Leaf::scalar() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Leaf.scalar)
  return scalar_;
}
inline void Leaf::set_scalar(float value) {
  
  scalar_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.Leaf.scalar)
}

inline bool Leaf::has_leaf() const {
  return leaf_case() != LEAF_NOT_SET;
}
inline void Leaf::clear_has_leaf() {
  _oneof_case_[0] = LEAF_NOT_SET;
}
inline Leaf::LeafCase Leaf::leaf_case() const {
  return Leaf::LeafCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Vector

// repeated float value = 1;
inline int Vector::value_size() const {
  return value_.size();
}
inline void Vector::clear_value() {
  value_.Clear();
}
inline float Vector::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Vector.value)
  return value_.Get(index);
}
inline void Vector::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.Vector.value)
}
inline void Vector::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.Vector.value)
}
inline const ::google::protobuf::RepeatedField< float >&
Vector::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.Vector.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
Vector::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.Vector.value)
  return &value_;
}

// -------------------------------------------------------------------

// SparseVector

// repeated int32 index = 1;
inline int SparseVector::index_size() const {
  return index_.size();
}
inline void SparseVector::clear_index() {
  index_.Clear();
}
inline ::google::protobuf::int32 SparseVector::index(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.SparseVector.index)
  return index_.Get(index);
}
inline void SparseVector::set_index(int index, ::google::protobuf::int32 value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.SparseVector.index)
}
inline void SparseVector::add_index(::google::protobuf::int32 value) {
  index_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.SparseVector.index)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SparseVector::index() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.SparseVector.index)
  return index_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SparseVector::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.SparseVector.index)
  return &index_;
}

// repeated float value = 2;
inline int SparseVector::value_size() const {
  return value_.size();
}
inline void SparseVector::clear_value() {
  value_.Clear();
}
inline float SparseVector::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.SparseVector.value)
  return value_.Get(index);
}
inline void SparseVector::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.SparseVector.value)
}
inline void SparseVector::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.SparseVector.value)
}
inline const ::google::protobuf::RepeatedField< float >&
SparseVector::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.SparseVector.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
SparseVector::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.SparseVector.value)
  return &value_;
}

// -------------------------------------------------------------------

// BucketizedSplit

// int32 feature_id = 1;
inline void BucketizedSplit::clear_feature_id() {
  feature_id_ = 0;
}
inline ::google::protobuf::int32 BucketizedSplit::feature_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.BucketizedSplit.feature_id)
  return feature_id_;
}
inline void BucketizedSplit::set_feature_id(::google::protobuf::int32 value) {
  
  feature_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.BucketizedSplit.feature_id)
}

// int32 threshold = 2;
inline void BucketizedSplit::clear_threshold() {
  threshold_ = 0;
}
inline ::google::protobuf::int32 BucketizedSplit::threshold() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.BucketizedSplit.threshold)
  return threshold_;
}
inline void BucketizedSplit::set_threshold(::google::protobuf::int32 value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.BucketizedSplit.threshold)
}

// int32 left_id = 3;
inline void BucketizedSplit::clear_left_id() {
  left_id_ = 0;
}
inline ::google::protobuf::int32 BucketizedSplit::left_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.BucketizedSplit.left_id)
  return left_id_;
}
inline void BucketizedSplit::set_left_id(::google::protobuf::int32 value) {
  
  left_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.BucketizedSplit.left_id)
}

// int32 right_id = 4;
inline void BucketizedSplit::clear_right_id() {
  right_id_ = 0;
}
inline ::google::protobuf::int32 BucketizedSplit::right_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.BucketizedSplit.right_id)
  return right_id_;
}
inline void BucketizedSplit::set_right_id(::google::protobuf::int32 value) {
  
  right_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.BucketizedSplit.right_id)
}

// -------------------------------------------------------------------

// Tree

// repeated .tensorflow.boosted_trees.Node nodes = 1;
inline int Tree::nodes_size() const {
  return nodes_.size();
}
inline void Tree::clear_nodes() {
  nodes_.Clear();
}
inline const ::tensorflow::boosted_trees::Node& Tree::nodes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.Tree.nodes)
  return nodes_.Get(index);
}
inline ::tensorflow::boosted_trees::Node* Tree::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.Tree.nodes)
  return nodes_.Mutable(index);
}
inline ::tensorflow::boosted_trees::Node* Tree::add_nodes() {
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.Tree.nodes)
  return nodes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::Node >*
Tree::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.Tree.nodes)
  return &nodes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::Node >&
Tree::nodes() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.Tree.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// TreeMetadata_PostPruneNodeUpdate

// int32 new_node_id = 1;
inline void TreeMetadata_PostPruneNodeUpdate::clear_new_node_id() {
  new_node_id_ = 0;
}
inline ::google::protobuf::int32 TreeMetadata_PostPruneNodeUpdate::new_node_id() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate.new_node_id)
  return new_node_id_;
}
inline void TreeMetadata_PostPruneNodeUpdate::set_new_node_id(::google::protobuf::int32 value) {
  
  new_node_id_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate.new_node_id)
}

// float logit_change = 2;
inline void TreeMetadata_PostPruneNodeUpdate::clear_logit_change() {
  logit_change_ = 0;
}
inline float TreeMetadata_PostPruneNodeUpdate::logit_change() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate.logit_change)
  return logit_change_;
}
inline void TreeMetadata_PostPruneNodeUpdate::set_logit_change(float value) {
  
  logit_change_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate.logit_change)
}

// -------------------------------------------------------------------

// TreeMetadata

// int32 num_layers_grown = 2;
inline void TreeMetadata::clear_num_layers_grown() {
  num_layers_grown_ = 0;
}
inline ::google::protobuf::int32 TreeMetadata::num_layers_grown() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeMetadata.num_layers_grown)
  return num_layers_grown_;
}
inline void TreeMetadata::set_num_layers_grown(::google::protobuf::int32 value) {
  
  num_layers_grown_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.TreeMetadata.num_layers_grown)
}

// bool is_finalized = 3;
inline void TreeMetadata::clear_is_finalized() {
  is_finalized_ = false;
}
inline bool TreeMetadata::is_finalized() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeMetadata.is_finalized)
  return is_finalized_;
}
inline void TreeMetadata::set_is_finalized(bool value) {
  
  is_finalized_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.TreeMetadata.is_finalized)
}

// repeated .tensorflow.boosted_trees.TreeMetadata.PostPruneNodeUpdate post_pruned_nodes_meta = 4;
inline int TreeMetadata::post_pruned_nodes_meta_size() const {
  return post_pruned_nodes_meta_.size();
}
inline void TreeMetadata::clear_post_pruned_nodes_meta() {
  post_pruned_nodes_meta_.Clear();
}
inline const ::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate& TreeMetadata::post_pruned_nodes_meta(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeMetadata.post_pruned_nodes_meta)
  return post_pruned_nodes_meta_.Get(index);
}
inline ::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate* TreeMetadata::mutable_post_pruned_nodes_meta(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.TreeMetadata.post_pruned_nodes_meta)
  return post_pruned_nodes_meta_.Mutable(index);
}
inline ::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate* TreeMetadata::add_post_pruned_nodes_meta() {
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.TreeMetadata.post_pruned_nodes_meta)
  return post_pruned_nodes_meta_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate >*
TreeMetadata::mutable_post_pruned_nodes_meta() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.TreeMetadata.post_pruned_nodes_meta)
  return &post_pruned_nodes_meta_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::TreeMetadata_PostPruneNodeUpdate >&
TreeMetadata::post_pruned_nodes_meta() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.TreeMetadata.post_pruned_nodes_meta)
  return post_pruned_nodes_meta_;
}

// -------------------------------------------------------------------

// GrowingMetadata

// int64 num_trees_attempted = 1;
inline void GrowingMetadata::clear_num_trees_attempted() {
  num_trees_attempted_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GrowingMetadata::num_trees_attempted() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.GrowingMetadata.num_trees_attempted)
  return num_trees_attempted_;
}
inline void GrowingMetadata::set_num_trees_attempted(::google::protobuf::int64 value) {
  
  num_trees_attempted_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.GrowingMetadata.num_trees_attempted)
}

// int64 num_layers_attempted = 2;
inline void GrowingMetadata::clear_num_layers_attempted() {
  num_layers_attempted_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GrowingMetadata::num_layers_attempted() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.GrowingMetadata.num_layers_attempted)
  return num_layers_attempted_;
}
inline void GrowingMetadata::set_num_layers_attempted(::google::protobuf::int64 value) {
  
  num_layers_attempted_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.GrowingMetadata.num_layers_attempted)
}

// int32 last_layer_node_start = 3;
inline void GrowingMetadata::clear_last_layer_node_start() {
  last_layer_node_start_ = 0;
}
inline ::google::protobuf::int32 GrowingMetadata::last_layer_node_start() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.GrowingMetadata.last_layer_node_start)
  return last_layer_node_start_;
}
inline void GrowingMetadata::set_last_layer_node_start(::google::protobuf::int32 value) {
  
  last_layer_node_start_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.GrowingMetadata.last_layer_node_start)
}

// int32 last_layer_node_end = 4;
inline void GrowingMetadata::clear_last_layer_node_end() {
  last_layer_node_end_ = 0;
}
inline ::google::protobuf::int32 GrowingMetadata::last_layer_node_end() const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.GrowingMetadata.last_layer_node_end)
  return last_layer_node_end_;
}
inline void GrowingMetadata::set_last_layer_node_end(::google::protobuf::int32 value) {
  
  last_layer_node_end_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.GrowingMetadata.last_layer_node_end)
}

// -------------------------------------------------------------------

// TreeEnsemble

// repeated .tensorflow.boosted_trees.Tree trees = 1;
inline int TreeEnsemble::trees_size() const {
  return trees_.size();
}
inline void TreeEnsemble::clear_trees() {
  trees_.Clear();
}
inline const ::tensorflow::boosted_trees::Tree& TreeEnsemble::trees(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeEnsemble.trees)
  return trees_.Get(index);
}
inline ::tensorflow::boosted_trees::Tree* TreeEnsemble::mutable_trees(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.TreeEnsemble.trees)
  return trees_.Mutable(index);
}
inline ::tensorflow::boosted_trees::Tree* TreeEnsemble::add_trees() {
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.TreeEnsemble.trees)
  return trees_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::Tree >*
TreeEnsemble::mutable_trees() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.TreeEnsemble.trees)
  return &trees_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::Tree >&
TreeEnsemble::trees() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.TreeEnsemble.trees)
  return trees_;
}

// repeated float tree_weights = 2;
inline int TreeEnsemble::tree_weights_size() const {
  return tree_weights_.size();
}
inline void TreeEnsemble::clear_tree_weights() {
  tree_weights_.Clear();
}
inline float TreeEnsemble::tree_weights(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeEnsemble.tree_weights)
  return tree_weights_.Get(index);
}
inline void TreeEnsemble::set_tree_weights(int index, float value) {
  tree_weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.boosted_trees.TreeEnsemble.tree_weights)
}
inline void TreeEnsemble::add_tree_weights(float value) {
  tree_weights_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.TreeEnsemble.tree_weights)
}
inline const ::google::protobuf::RepeatedField< float >&
TreeEnsemble::tree_weights() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.TreeEnsemble.tree_weights)
  return tree_weights_;
}
inline ::google::protobuf::RepeatedField< float >*
TreeEnsemble::mutable_tree_weights() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.TreeEnsemble.tree_weights)
  return &tree_weights_;
}

// repeated .tensorflow.boosted_trees.TreeMetadata tree_metadata = 3;
inline int TreeEnsemble::tree_metadata_size() const {
  return tree_metadata_.size();
}
inline void TreeEnsemble::clear_tree_metadata() {
  tree_metadata_.Clear();
}
inline const ::tensorflow::boosted_trees::TreeMetadata& TreeEnsemble::tree_metadata(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeEnsemble.tree_metadata)
  return tree_metadata_.Get(index);
}
inline ::tensorflow::boosted_trees::TreeMetadata* TreeEnsemble::mutable_tree_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.TreeEnsemble.tree_metadata)
  return tree_metadata_.Mutable(index);
}
inline ::tensorflow::boosted_trees::TreeMetadata* TreeEnsemble::add_tree_metadata() {
  // @@protoc_insertion_point(field_add:tensorflow.boosted_trees.TreeEnsemble.tree_metadata)
  return tree_metadata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::TreeMetadata >*
TreeEnsemble::mutable_tree_metadata() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.boosted_trees.TreeEnsemble.tree_metadata)
  return &tree_metadata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::boosted_trees::TreeMetadata >&
TreeEnsemble::tree_metadata() const {
  // @@protoc_insertion_point(field_list:tensorflow.boosted_trees.TreeEnsemble.tree_metadata)
  return tree_metadata_;
}

// .tensorflow.boosted_trees.GrowingMetadata growing_metadata = 4;
inline bool TreeEnsemble::has_growing_metadata() const {
  return this != internal_default_instance() && growing_metadata_ != NULL;
}
inline void TreeEnsemble::clear_growing_metadata() {
  if (GetArenaNoVirtual() == NULL && growing_metadata_ != NULL) delete growing_metadata_;
  growing_metadata_ = NULL;
}
inline const ::tensorflow::boosted_trees::GrowingMetadata& TreeEnsemble::growing_metadata() const {
  const ::tensorflow::boosted_trees::GrowingMetadata* p = growing_metadata_;
  // @@protoc_insertion_point(field_get:tensorflow.boosted_trees.TreeEnsemble.growing_metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::boosted_trees::GrowingMetadata*>(
      &::tensorflow::boosted_trees::_GrowingMetadata_default_instance_);
}
inline ::tensorflow::boosted_trees::GrowingMetadata* TreeEnsemble::mutable_growing_metadata() {
  
  if (growing_metadata_ == NULL) {
    _slow_mutable_growing_metadata();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.boosted_trees.TreeEnsemble.growing_metadata)
  return growing_metadata_;
}
inline ::tensorflow::boosted_trees::GrowingMetadata* TreeEnsemble::release_growing_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.boosted_trees.TreeEnsemble.growing_metadata)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_growing_metadata();
  } else {
    ::tensorflow::boosted_trees::GrowingMetadata* temp = growing_metadata_;
    growing_metadata_ = NULL;
    return temp;
  }
}
inline  void TreeEnsemble::set_allocated_growing_metadata(::tensorflow::boosted_trees::GrowingMetadata* growing_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete growing_metadata_;
  }
  if (growing_metadata != NULL) {
    _slow_set_allocated_growing_metadata(message_arena, &growing_metadata);
  }
  growing_metadata_ = growing_metadata;
  if (growing_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.boosted_trees.TreeEnsemble.growing_metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace boosted_trees
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tensorflow_2fcore_2fkernels_2fboosted_5ftrees_2fboosted_5ftrees_2eproto__INCLUDED
